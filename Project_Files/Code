import cv2
import pytesseract
from PIL import Image
import torch
import torch.nn as nn
import torchvision.transforms as transforms

#simple CNN model for dysgraphia detection

class DysgraphiaClassifier(nn.Module):
    def __init__(self):
        super(DysgraphiaClassifier, self).__init__()
        self.model = nn.Sequential(
            nn.Conv2d(1, 8, 3, 1, 1),
            nn.ReLU(),
            nn.MaxPool2d(2),
            nn.Conv2d(8, 16, 3, 1, 1),
            nn.ReLU(),
            nn.AdaptiveAvgPool2d((1, 1)),
            nn.Flatten(),
            nn.Linear(16, 2)  # Binary classification: dysgraphic or not
        )

    def forward(self, x):
        return self.model(x)


# Image Preprocessing for OCR and classification
def preprocess_image(image_path):
    img = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)
    # OCR-specific preprocessing
    ocr_img = cv2.threshold(img, 120, 255, cv2.THRESH_BINARY_INV + cv2.THRESH_OTSU)[1]
    
    # For classifier
    transform = transforms.Compose([
        transforms.ToPILImage(),
        transforms.Resize((64, 64)),
        transforms.ToTensor()
    ])
    tensor_img = transform(img).unsqueeze(0)  # Shape: (1, 1, 64, 64)
    return ocr_img, tensor_img


# Main Function
def detect_dysgraphia(image_path):
    ocr_img, tensor_img = preprocess_image(image_path)

    # OCR using Tesseract
    text = pytesseract.image_to_string(ocr_img)
    print("Extracted Text:\n", text)

    model = DysgraphiaClassifier()
    model.eval()

    # Predict
    with torch.no_grad():
        output = model(tensor_img)
        _, predicted = torch.max(output, 1)
        label = "Dysgraphic" if predicted.item() == 1 else "Not Dysgraphic"
        print("Prediction:", label)

if __name__ == "__main__":
    image_path = 'image3.webp'  #image path
    detect_dysgraphia(image_path)
